#!/usr/bin/env python

# Some hacks to allow attribute docstrings.  Need to use true() & false(), and _('str').
# Forgive me for being a little bit too clever here, but it's necessary for my documentation tool.
# See http://groups.google.com/group/comp.lang.python/browse_frm/thread/0bf6f58beb8a15fc
class MyBool(int):
    
    def __str__(self):
        return `self.__int__() > 0`
    def __repr__(self):
        return self.__str__()

def bool_func(val):
    def blah():
       return MyBool(val)
    return blah

#true = lambda MyBool : MyBool(1)
true = bool_func(True)
false = bool_func(False)

class MyString(str):
    pass
_ = MyString

class SupportedFeatures(object):
    """ Describes the features that are known to vary between DB-API implementations.
    Class attributes are used to set the default for all available features. These are
    overridden as necessary when the class is instatiated with a known driver name.
    """
    
    def __init__(self, driver_name): 
        """ Return the features supported by a given driver.
        The driver should be passed by name
        """
        self._driver_name = driver_name
        if driver_name == 'pysqlite2': 
            self.explicit_db_create = False
            self.inoperable_closed_connections = False
            self.authentication = False
            self.sane_empty_fetch = False
            self.driver_level_datatypes = False
            self.time_datatype = True
            self.transactional_ddl = False
            #self.callproc = False
            self.sane_rowcount = False
            self.sane_empty_fetch = False
            self.time_datatype_time = False
            #self.blob_binary = False
        elif driver_name == 'psycopg2':
            self.serial_key_def = 'serial'
            self.rowcount_reset_empty_fetch = False
            self.clob_type = 'text'
            self.blob_type = 'bytea'
            self.stored_procedure_language = "PL/pgSQL"
        elif driver_name == 'MySQLdb':
            self.clob_type = "text"
            self.time_datatype_subsecond = True 
            self.timestamp_datatype_subsecond = False
            self.sane_timestamp = False
            self.sane_empty_fetch = False
            self.setoutputsize = False
            self.rowcount_reset_empty_fetch = False
        elif driver_name == 'pydb2':
            self.serial_key_def = "int generated by default as identity"

    _driver_name = _('Baseline')
    _driver_name.__doc__ = "Default values for all drivers"

    transactional_ddl = true()
    transactional_ddl.__doc__ = "DDL statements are transactional (ie, need commit)"

    connection_level_exceptions = true()
    connection_level_exceptions.__doc__ = "Exceptions are defined at the connection level (optional)"

    rollback_defined = true()
    rollback_defined.__doc__ = "Driver defines rollback"

    call_proc = true()
    call_proc.__doc__ = "Database supports stored procedures"

    explicit_db_create = true()
    explicit_db_create.__doc__ = "Databases are created explicitly (here for SQLite)"

    authentication = true()
    authentication.__doc__ = "Database requires authentication (here for SQLite)"
    
    inoperable_closed_connections = true()
    inoperable_closed_connections.__doc__ = "Closed connections are no longer usable"
    
    sane_empty_fetch = true()
    sane_empty_fetch.__doc__ = "Fetch should fail if no query is issued"

    sane_rowcount = true()
    sane_rowcount.__doc__ = "Rowcount should be set correctly by fetchmany"

    rowcount_reset_empty_fetch = true()
    rowcount_reset_empty_fetch.__doc__ = "Rowcount is reset after an empty fetch"

    driver_level_datatypes = true()
    driver_level_datatypes.__doc__ = "Available datatypes are defined at the driver level"

    driver_level_datatypes_binary = true()
    driver_level_datatypes_binary.__doc__ = "The Binary datatype is defined at the driver level"

    time_datatype = true()
    time_datatype.__doc__ = "Driver supports the time datatype (optional)"

    time_datatype_time = true()
    time_datatype_time.__doc__ = "The driver's time datatype supports python time values"

    time_datatype_subsecond = true()
    time_datatype_subsecond.__doc__ = "The time datatype supports subsecond times"

    timestamp_datatype_subsecond = true()
    timestamp_datatype_subsecond.__doc__ = "The timestamp datatype supports subsecond times"

    sane_timestamp = true()
    sane_timestamp.__doc__ = "Timestamp returns sane timestamps"

    setoutputsize = true()
    setoutputsize.__doc__ = "Driver supports setoutputsize"
    
    serial_key_def = _('int')
    serial_key_def.__doc__ = "Column definition to use for serial keys"
    
    blob_type = _('blob')
    blob_type.__doc__ = "Column definition to use for BLOBs"
    
    clob_type = _('clob')
    clob_type.__doc__ = "Column definition to use for CLOBs"
    
    stored_procedure_language = _("SQL:2003")
    stored_procedure_language.__doc__ =  ("Stored procedure language can be one of: " 
        "Transact-SQL (Microsoft SQL Server), PL/SQL (Oracle), SQL/PL (DB2), "
        "PL/pgSQL (PostgreSQL), SQL:2003 (Anything standards compliant (MySQL))")

    callproc = true()  
    callproc.__doc__ = "Database support stored procedures (Optional)"

    lower_func = _('lower')
    lower_func.__doc__ = "The name of the function used to convert a string to lowercase"

    dbapi_level = _("2.0")
    dbapi_level.__doc__ = "The DB-API level that the driver is known to support"

    scrollable_cursors = false()
    scrollable_cursors.__doc__ = "Driver supports scrollable cursors"

    blob_binary = true()
    blob_binary.__doc__ = "BLOBs can be created from the driver's Binary type"

    smart_lob_open = false()
    smart_lob_open.__doc__ = "LOBs can be read from a file handle"

    lastrowid = true()
    lastrowid.__doc__ = "Supports lastrowid"

