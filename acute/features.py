#!/usr/bin/env python

# See the README for details on how this module works (if it's not obvious).

# NOTE: The docstrings for each class attribute are stored in a seperate 
# attribute that follows the naming convention "_ATTRIBUTE__doc__".  
# This allows the introspection mechanism of report.py to work.
# See http://groups.google.com/group/comp.lang.python/browse_frm/thread/0bf6f58beb8a15fc

class SupportedFeatures(object):
    """Describes the features that are known to vary between drivers.
    Class attributes are used to set the default for every feature. These are
    overridden for the drivers as necessary when the class is instatiated.
    """
    
    def __init__(self, driver_name): 
        """ Return the features supported by a given driver.
        The driver should be passed by name
        """
        self._driver_name = driver_name
        if driver_name == 'pysqlite2': 
            self.explicit_db_create = False
            self.inoperable_closed_connections = False
            self.authentication = False
            self.sane_empty_fetch = False
            self.driver_level_datatypes = False
            self.time_datatype = True
            self.transactional_ddl = False
            #self.callproc = False
            self.sane_rowcount = False
            self.sane_empty_fetch = False
            self.time_datatype_time = False
            #self.blob_binary = False
        elif driver_name == 'psycopg2':
            self.serial_key_def = 'serial'
            self.rowcount_reset_empty_fetch = False
            self.clob_type = 'text'
            self.blob_type = 'bytea'
            self.stored_procedure_language = "PL/pgSQL"
        elif driver_name == 'MySQLdb':
            self.clob_type = "text"
            self.time_datatype_subsecond = True 
            self.timestamp_datatype_subsecond = False
            self.sane_timestamp = False
            self.sane_empty_fetch = False
            self.setoutputsize = False
            self.rowcount_reset_empty_fetch = False
        elif driver_name == 'pydb2':
            self.serial_key_def = "int generated by default as identity"

    _driver_name = 'Baseline'
    _driver_name__doc__ = "Default values for all drivers"

    transactional_ddl = True
    _transactional_ddl__doc__ = "DDL statements are transactional (need commit)"

    connection_level_exceptions = True
    _connection_level_exceptions__doc__ = (
        "Exceptions are defined at the connection level (optional)")

    rollback_defined = True
    _rollback_defined__doc__ = "Driver defines rollback"

    call_proc = True
    _call_proc__doc__ = "Database supports stored procedures"

    explicit_db_create = True
    _explicit_db_create__doc__ = (
        "Databases are created explicitly (here for SQLite)")

    authentication = True
    _authentication__doc__ = "Database requires authentication (for SQLite)"
    
    inoperable_closed_connections = True
    _inoperable_closed_connections__doc__ = (
        "Closed connections are no longer usable")
    
    sane_empty_fetch = True
    _sane_empty_fetch__doc__ = "Fetch should fail if no query is issued"

    sane_rowcount = True
    _sane_rowcount__doc__ = "Rowcount should be set correctly by fetchmany"

    rowcount_reset_empty_fetch = True
    _rowcount_reset_empty_fetch__doc__ = (
        "Rowcount is reset after an empty fetch")

    driver_level_datatypes = True
    _driver_level_datatypes__doc__ = (
        "Available datatypes are defined at the driver level")

    driver_level_datatypes_binary = True
    _driver_level_datatypes_binary__doc__ = (
        "The Binary datatype is defined at the driver level")

    time_datatype = True
    _time_datatype__doc__ = "Driver supports the time datatype (optional)"

    time_datatype_time = True
    _time_datatype_time__doc__ = (
        "The driver's time datatype supports python time values")

    time_datatype_subsecond = True
    _time_datatype_subsecond__doc__ = (
        "The time datatype supports subsecond times")

    timestamp_datatype_subsecond = True
    _timestamp_datatype_subsecond__doc__ = (
        "The timestamp datatype supports subsecond times")

    sane_timestamp = True
    _sane_timestamp__doc__ = "Timestamp returns sane timestamps"

    setoutputsize = True
    _setoutputsize__doc__ = "Driver supports setoutputsize"
    
    serial_key_def = 'int'
    _serial_key_def__doc__ = "Column definition to use for serial keys"
    
    blob_type = 'blob'
    _blob_type__doc__ = "Column definition to use for BLOBs"
    
    clob_type = 'clob'
    _clob_type__doc__ = "Column definition to use for CLOBs"
    
    stored_procedure_language = "SQL:2003"
    _stored_procedure_language__doc__ =  (
        "Stored procedure language can be one of: " 
        "Transact-SQL (Microsoft SQL Server), PL/SQL (Oracle), SQL/PL (DB2), "
        "PL/pgSQL (PostgreSQL), SQL:2003 (Anything standards compliant (MySQL))")

    callproc = True
    _callproc__doc__ = "Database support stored procedures (Optional)"

    lower_func = 'lower'
    _lower_func__doc__ = (
        "The name of the function used to convert a string to lowercase")

    dbapi_level = "2.0"
    _dbapi_level__doc__ = "The DB-API level that the driver supports"

    scrollable_cursors = False
    _scrollable_cursors__doc__ = "Driver supports scrollable cursors"

    blob_binary = True
    _blob_binary__doc__ = "BLOBs can be created from the driver's Binary type"

    smart_lob_open = False
    _smart_lob_open__doc__ = "LOBs can be read from a file handle"

    lastrowid = True
    _lastrowid__doc__ = "Supports lastrowid"

